# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: npm install

    - name: Build the backend
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}
      run: npm run build:prod

    - name: Run tests
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}    
      run: npm run test:prod

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1        
        
    - name: Build the Docker image
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}        
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
      run: docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/express-app:${{ github.sha }} .

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Google Cloud
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_REGION: ${{ secrets.GCP_REGION }}          
      run: gcloud auth configure-docker

    - name: Push the Docker image
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_REGION: ${{ secrets.GCP_REGION }}          
      run: docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/express-app:${{ github.sha }}

    - name: Deploy to Cloud Run
      env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          PORT: ${{ secrets.PORT }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}          
          GCP_REGION: ${{ secrets.GCP_REGION }}          
      run: gcloud run deploy express-app \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/express-app:${{ github.sha }} \
          --platform managed \
          --region ${{ secrets.GCP_REGION }} \
          --allow-unauthenticated
